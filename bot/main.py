import telebot
from telebot import types
import requests
import pyfiglet
import html
import logging
import random
import ipaddress
import time
from datetime import datetime
from faker import Faker
import re
from telebot.apihelper import ApiException
import os
import platform
from telethon.sync import TelegramClient
from telethon.tl.functions.contacts import ResolveUsernameRequest
from telethon.tl.types import UserProfilePhoto
import asyncio
import webbrowser
from bs4 import BeautifulSoup
import config 
from telethon.tl.functions.users import GetFullUserRequest
import sqlite3
import threading

NUMVERIFY_API_KEY = config.NUMVERIFY
IPINFO_TOKEN = config.IPINFO
VK_TOKEN = config.VK
BOT_TOKEN = config.BOT_TOKEN
DB_FILE = 'users.db'
ADMIN_IDS = config.ADMIN
VK_API_URL = 'https://api.vk.com/method/users.get'
ADMIN_ID = config.ADMIN_R
CHANNEL_USERNAME = config.CHANNEL_USERNAME
API_ID = config.API_ID
PROTECTED_USERS = config.PROTECTED_USERS
API_HASH = config.API_HASH


client = TelegramClient('bot_session', API_ID, API_HASH)

loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

async def get_user_info(identifier):
    async with client:
        try:
            if identifier.isdigit():
                user = await client(GetFullUserRequest(int(identifier)))
            else:
                if identifier.startswith('@'):
                    identifier = identifier[1:]
                user = await client(GetFullUserRequest(identifier))
            return user.users[0] if user.users else None
        except Exception as e:
            return None

def run_async(coroutine):
    return loop.run_until_complete(coroutine)

def show_progress_bar(chat_id):
    progress_message = bot.send_message(chat_id, "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏... 0%")
    for i in range(10, 101, 10):
        bot.edit_message_text(f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏... {i}%", chat_id, progress_message.message_id)
        time.sleep(0.5)
    bot.delete_message(chat_id, progress_message.message_id)

def show_progress_bar1(chat_id):
    progress_message = bot.send_message(chat_id, "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏... 0%")
    for i in range(10, 101, 10):
        bot.edit_message_text(f"–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞... {i}%", chat_id, progress_message.message_id)
        time.sleep(0.5)
    bot.delete_message(chat_id, progress_message.message_id)

def show_progress_bar123(chat_id):
    progress_message = bot.send_message(chat_id, "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏... 0%")
    for i in range(10, 101, 10):
        bot.edit_message_text(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è... {i}%", chat_id, progress_message.message_id)
        time.sleep(0.5)
    bot.delete_message(chat_id, progress_message.message_id)

def fetch_phoneradar_info(phone: str, chat_id) -> str:
    phoneradar_url = f'http://phoneradar.ru/phone/{phone}'
    try:
        response = requests.get(phoneradar_url, timeout=7)
        soup = BeautifulSoup(response.text, 'html.parser')

        try:
            reviews = soup.find('div', class_='alert alert-danger').text.strip()
        except:
            reviews = soup.find('table', class_='table').text.strip()

        lines = [line for line in reviews.split('\n') if line.strip()]
        formatted_lines = [f"‚î£ {line}" for line in lines[:-1]]
        formatted_lines.append(f"‚îó {lines[-1]}")
        formatted_reviews = '\n'.join(formatted_lines)

    except requests.exceptions.RequestException:
        formatted_reviews = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å PhoneRadar.'

    return formatted_reviews

conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS users
                  (user_id INTEGER PRIMARY KEY, username TEXT, is_blocked INTEGER, block_time INTEGER)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS admins
                  (user_id INTEGER PRIMARY KEY)''')
conn.commit()


def is_user_blocked(user_id):
    cursor.execute("SELECT is_blocked, block_time FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        is_blocked, block_time = result
        if is_blocked == 1:
            if block_time == 0 or block_time > int(time.time()):
                return True
    return False

def is_admin(user_id):
    cursor.execute("SELECT user_id FROM admins WHERE user_id = ?", (user_id,))
    return cursor.fetchone() is not None

def get_phone_info(phone_number, is_rf=False):
    if is_rf:
        url = f"https://htmlweb.ru/geo/api.php?json&telcod={phone_number}"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }
        response = requests.get(url, headers=headers)
        data = response.json()

        if isinstance(data, dict):
            country = data.get('country', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            lang = data.get('country', {}).get('lang', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            region = data.get('region', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            city = data.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            operator_info = data.get('0', {})
            operator = operator_info.get('oper', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            latitude = operator_info.get('latitude', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            longitude = operator_info.get('longitude', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            mobile = operator_info.get('mobile', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            s = fetch_phoneradar_info(phone_number)

            info = (
                f'''
üì≤–ù–æ–º–µ—Ä: {phone_number}
‚î£ –°—Ç—Ä–∞–Ω–∞: {country}
‚î£ –†–µ–≥–∏–æ–Ω: {region}
‚î£ –ì–æ—Ä–æ–¥: {city}
‚î£ –û–ø–µ—Ä–∞—Ç–æ—Ä: {operator}
‚î£ –®–∏—Ä–æ—Ç–∞: {latitude}
‚î£ –î–æ–ª–≥–æ—Ç–∞: {longitude}
‚î£ –Ø–∑—ã–∫: {lang}
‚îó –í–∞–ª–∏–¥: {mobile}
üì≤Phoneradar:
{s}
üåêC–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:
‚î£ –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: https://ok.ru/profile/{phone_number}
‚î£ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: https://vk.com/search?c%5Bq%5D={phone_number}&c%5Bsection%5D=people
‚î£ Telegramm: https://t.me/{phone_number}
‚î£ Facebook: https://www.facebook.com/search/top?q={phone_number}
‚î£ Instagram: https://www.instagram.com/{phone_number}
‚î£ Twitter: https://twitter.com/search?q={phone_number}
‚î£ Bing: https://www.bing.com/search?q={phone_number}
‚î£ Skype: https://www.skype.org/search?q={phone_number}
‚îó WhatsApp: https://www.whatsapp.com/search?g={phone_number}
'''
            )
        else:
            info = "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API."
    else:
        url = f"http://apilayer.net/api/validate?access_key={NUMVERIFY_API_KEY}&number={phone_number}&format=1"
        response = requests.get(url)
        data = response.json()

        if data.get("valid"):
            country = data.get("country_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            region = data.get("location", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            city = data.get("location", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            operator = data.get("carrier", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            latitude = data.get("latitude", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            longitude = data.get("longitude", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            lang = data.get("line_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            mobile = "–î–∞" if data.get("line_type") == "mobile" else "–ù–µ—Ç"

            info = (
                f'''
üì≤–ù–æ–º–µ—Ä: {phone_number}
‚î£ –°—Ç—Ä–∞–Ω–∞: {country}
‚î£ –†–µ–≥–∏–æ–Ω: {region}
‚î£ –ì–æ—Ä–æ–¥: {city}
‚î£ –û–ø–µ—Ä–∞—Ç–æ—Ä: {operator}
‚î£ –®–∏—Ä–æ—Ç–∞: {latitude}
‚î£ –î–æ–ª–≥–æ—Ç–∞: {longitude}
‚î£ –Ø–∑—ã–∫: {lang}
‚îó –í–∞–ª–∏–¥: {mobile}
'''
            )
        else:
            info = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

    return info

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY
        )
    ''')
    conn.commit()
    conn.close()

def add_user(user_id):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()

def get_all_users():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users')
    users = [row[0] for row in cursor.fetchall()]
    conn.close()
    return users

init_db()

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
    ]
)

def get_ip_info1(ip_address):
    url = f"https://ipinfo.io/{ip_address}?token={IPINFO_TOKEN}"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

logger = logging.getLogger(__name__)

fake = Faker('ru_RU')
bot = telebot.TeleBot(BOT_TOKEN)

def generate_ip(version=4):
    if version == 4:
        return ".".join(str(random.randint(0, 255)) for _ in range(4))
    elif version == 6:
        return ":".join(f"{random.randint(0, 65535):04x}" for _ in range(8))

def get_ip_info(ip):
    try:
        if "." in ip:
            ip_obj = ipaddress.IPv4Address(ip)
        else:
            ip_obj = ipaddress.IPv6Address(ip)
        info = {
            "IP": ip,
            "Version": ip_obj.version,
            "Type": "Public" if ip_obj.is_global else "Private",
            "Reserved": ip_obj.is_reserved,
            "Loopback": ip_obj.is_loopback,
            "Link Local": ip_obj.is_link_local,
            "Multicast": ip_obj.is_multicast,
        }
        return info
    except ValueError:
        return None

def format_ip_info(info):
    if not info:
        return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å."
    return (
        f"=== IP-–∞–¥—Ä–µ—Å (IPv{info['Version']}) ===\n"
        f"IP: {info['IP']}\n"
        f"Type: {info['Type']}\n"
        f"Reserved: {info['Reserved']}\n"
        f"Loopback: {info['Loopback']}\n"
        f"Link Local: {info['Link Local']}\n"
        f"Multicast: {info['Multicast']}\n"
    )

def generate_person_data():
    full_name = fake.name()
    gender = "–ú—É–∂—á–∏–Ω–∞" if fake.boolean() else "–ñ–µ–Ω—â–∏–Ω–∞"
    birthdate = fake.date_of_birth(minimum_age=18, maximum_age=90)
    age = (datetime.now().date() - birthdate).days // 365

    card_number = fake.credit_card_number(card_type='visa')
    cvc = fake.credit_card_security_code(card_type='visa')
    card_expiry = fake.credit_card_expire()
    bank_name = fake.bank()
    iban = fake.iban()

    address = fake.address().replace("\n", ", ")
    email = fake.email()
    phone_number = fake.phone_number()

    job = fake.job()
    company = fake.company()
    position = job

    inn = fake.random_int(min=1000000000, max=9999999999)
    snils = fake.random_int(min=10000000000, max=99999999999)
    passport_series = fake.random_number(digits=4, fix_len=True)
    passport_number = fake.random_number(digits=6, fix_len=True)
    driver_license = fake.random_number(digits=10, fix_len=True)

    social_network = {
        "Facebook": fake.user_name(),
        "Instagram": fake.user_name(),
        "Twitter": fake.user_name(),
    }

    interests = [fake.word() for _ in range(3)]

    return (
        f"=== –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ===\n"
        f"–§–ò–û: {full_name}\n"
        f"–ü–æ–ª: {gender}\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {age}\n\n"
        f"=== –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ===\n"
        f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {card_number}\n"
        f"CVC: {cvc}\n"
        f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã: {card_expiry}\n"
        f"–ë–∞–Ω–∫: {bank_name}\n"
        f"IBAN: {iban}\n\n"
        f"=== –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ===\n"
        f"–ê–¥—Ä–µ—Å: {address}\n"
        f"Email: {email}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n\n"
        f"=== –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ===\n"
        f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {job}\n"
        f"–ö–æ–º–ø–∞–Ω–∏—è: {company}\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n\n"
        f"=== –î–æ–∫—É–º–µ–Ω—Ç—ã ===\n"
        f"–ò–ù–ù: {inn}\n"
        f"–°–ù–ò–õ–°: {snils}\n"
        f"–ü–∞—Å–ø–æ—Ä—Ç: {passport_series} {passport_number}\n"
        f"–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞: {driver_license}\n\n"
        f"=== –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ ===\n"
        f"Facebook: {social_network['Facebook']}\n"
        f"Instagram: {social_network['Instagram']}\n"
        f"Twitter: {social_network['Twitter']}\n\n"
        f"=== –ò–Ω—Ç–µ—Ä–µ—Å—ã ===\n"
        f"{', '.join(interests)}\n"
    )

def generate_combined_data():
    ipv4 = generate_ip(version=4)
    ipv4_info = get_ip_info(ipv4)
    ipv4_data = format_ip_info(ipv4_info)

    ipv6 = generate_ip(version=6)
    ipv6_info = get_ip_info(ipv6)
    ipv6_data = format_ip_info(ipv6_info)

    person_data = generate_person_data()

    combined_data = f"{ipv4_data}\n{ipv6_data}\n{person_data}"
    return combined_data

def check_subscription(user_id):
       try:
           chat_member = bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
           return chat_member.status in ['member', 'administrator', 'creator']
       except Exception as e:
           logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
           return False

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    if is_user_blocked(message.from_user.id):
        cursor.execute("SELECT block_time FROM users WHERE user_id = ?", (message.from_user.id,))
        block_time = cursor.fetchone()[0]
        if block_time == 0:
            bot.send_message(message.chat.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        else:
            unblock_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(block_time))
            bot.send_message(message.chat.id, f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {unblock_date} –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    if check_subscription(user_id):
        add_user(user_id)
        bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ—Å–º–æ—Ç—Ä–∏ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã /help")
        s = types.InlineKeyboardMarkup(row_width=2)
        sub_1 = types.InlineKeyboardButton(f"‚úÖ–†–ï–ó–ï–†–í–ù–ê–Ø –°–°–´–õ–ö–ê‚úÖ", url='https://gemorproject.github.io/gemor/')
        s.add(sub_1)
        sent = bot.send_message(message.chat.id, "‚ö° ‚úÖ–†–ï–ó–ï–†–í–ù–ê–Ø –°–°–´–õ–ö–ê‚úÖ ‚ö°", reply_markup=s)
        bot.pin_chat_message(message.chat.id, sent.message_id)
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}"))
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.", reply_markup=markup)

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id == ADMIN_ID or is_admin(message.from_user.id):
        markup = types.InlineKeyboardMarkup()
        block_button = types.InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='block')
        unblock_button = types.InlineKeyboardButton("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='unblock')
        add_admin_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='add_admin')
        remove_admin_button = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='remove_admin')
        mailing_button = types.InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞", callback_data='mailing')
        markup.add(block_button, unblock_button,mailing_button, add_admin_button, remove_admin_button)
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == 'block':
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        bot.register_next_step_handler(msg, process_block_user)
    elif call.data == 'unblock':
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        bot.register_next_step_handler(msg, unblock_user)
    elif call.data == 'add_admin':
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∞–¥–º–∏–Ω–æ–º:")
        bot.register_next_step_handler(msg, add_admin)
    elif call.data == 'remove_admin':
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ:")
        bot.register_next_step_handler(msg, remove_admin)
    elif call.data == 'mailing':
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        bot.register_next_step_handler(msg, mailing)

def process_block_user(message):
    try:
        user_id = int(message.text)
        if user_id in PROTECTED_USERS:
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—â–∏—â–µ–Ω –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
            return
        cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
        if cursor.fetchone() is None:
            cursor.execute("INSERT INTO users (user_id, is_blocked, block_time) VALUES (?, ?, ?)",
                           (user_id, 0, 0))
            conn.commit()
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –¥–Ω—è—Ö (0 –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏):")
        bot.register_next_step_handler(msg, lambda m: block_user(m, user_id))
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

def block_user(message, user_id):
    try:
        block_days = int(message.text)
        if block_days < 0:
            bot.send_message(message.chat.id, "–í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return

        if block_days == 0:
            block_timestamp = 0
            cursor.execute("UPDATE users SET is_blocked = 1, block_time = ? WHERE user_id = ?",
                           (block_timestamp, user_id))
            conn.commit()
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.")
            try:
                bot.send_message(user_id, "–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        else:
            block_timestamp = int(time.time()) + block_days * 86400  # 86400 —Å–µ–∫—É–Ω–¥ –≤ –¥–Ω–µ
            unblock_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(block_timestamp))
            cursor.execute("UPDATE users SET is_blocked = 1, block_time = ? WHERE user_id = ?",
                           (block_timestamp, user_id))
            conn.commit()
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {unblock_date}.")
            try:
                bot.send_message(user_id, f"–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {unblock_date}.")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

def unblock_user(message):
    try:
        user_id = int(message.text)
        cursor.execute("UPDATE users SET is_blocked = 0, block_time = 0 WHERE user_id = ?", (user_id,))
        conn.commit()
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        try:
            bot.send_message(user_id, "–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

def add_admin(message):
    try:
        user_id = int(message.text)
        if user_id in PROTECTED_USERS:
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—â–∏—â–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º.")
            return
        cursor.execute("INSERT OR IGNORE INTO admins (user_id) VALUES (?)", (user_id,))
        conn.commit()
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

def remove_admin(message):
    try:
        user_id = int(message.text)
        if user_id in PROTECTED_USERS:
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—â–∏—â–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω.")
            return
        cursor.execute("DELETE FROM admins WHERE user_id = ?", (user_id,))
        conn.commit()
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

def mailing(message):
    text = message.text
    cursor.execute("SELECT user_id FROM users WHERE is_blocked = 0 OR (block_time > 0 AND block_time < ?)", (int(time.time()),))
    users = cursor.fetchall()
    for user in users:
        try:
            bot.send_message(user[0], text, parse_mode='Markdown')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
    bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

def check_blocks():
    while True:
        try:
            current_time = int(time.time())
            cursor.execute("SELECT user_id FROM users WHERE is_blocked = 1 AND block_time > 0 AND block_time < ?", (current_time,))
            users_to_unblock = cursor.fetchall()
            for user in users_to_unblock:
                cursor.execute("UPDATE users SET is_blocked = 0, block_time = 0 WHERE user_id = ?", (user[0],))
                conn.commit()
                try:
                    bot.send_message(user[0], "–í–∞—à–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –∏ –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[0]}: {e}")
            time.sleep(60)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ check_blocks: {e}")

@bot.message_handler(commands=['generate'])
def generate_data(message):
    user_id = message.from_user.id
    if is_user_blocked(message.from_user.id):
        cursor.execute("SELECT block_time FROM users WHERE user_id = ?", (message.from_user.id,))
        block_time = cursor.fetchone()[0]
        if block_time == 0:
            bot.send_message(message.chat.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        else:
            unblock_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(block_time))
            bot.send_message(message.chat.id, f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {unblock_date} –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    if not check_subscription(user_id):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    combined_data = generate_combined_data()
    show_progress_bar123(message.chat.id)
    bot.reply_to(message, f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{combined_data}")

@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, "‚õÑ –ö–æ–º–∞–Ω–¥—ã:\n"
                                      "üíª /ip <ip> - –ü–æ–∏—Å–∫ –ø–æ ip\n"
                                      "üì≤ /num <number> - –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                                      "üì® /tg <@username –∏–ª–∏ id> - –ü–æ–∏—Å–∫ –ø–æ Telegram\n"
                                      "üîµ /vk <vk_id> - –ü–æ–∏—Å–∫ –ø–æ VK\n"
                                      "üëæ /generate - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö\n"
                                      "ü§ñ /banner <name> - –°–æ–∑–¥–∞–µ—Ç –±–∞–Ω–Ω–µ—Ä(English)\n"
                                      "üì¨ /pos <name> - –ü–æ–∏—Å–∫ –ø–æ –ø–æ—á—Ç–µ\n"
                                      "üéÜ /admin - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n"
                                
                                )

#–ø–æ–∏—Å–∫ –≤–∫
@bot.message_handler(commands=['vk'])
def handle_vk_command(message):
    user_id = message.from_user.id
    if is_user_blocked(message.from_user.id):
        cursor.execute("SELECT block_time FROM users WHERE user_id = ?", (message.from_user.id,))
        block_time = cursor.fetchone()[0]
        if block_time == 0:
            bot.send_message(message.chat.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        else:
            unblock_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(block_time))
            bot.send_message(message.chat.id, f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {unblock_date} –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    if not check_subscription(user_id):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    try:

        user_id = message.text.split()[1]

        params = {
            'user_ids': user_id,
            'fields': 'first_name,last_name,photo_200,city,country,bdate,status,occupation,followers_count,sex,relation',
            'access_token': VK_TOKEN,
            'v': '5.131'
        }

        response = requests.get(VK_API_URL, params=params).json()

        if 'response' in response:
            user_info = response['response'][0]
            vk_id = f"https://vk.com/id{user_id}"

            first_name = user_info.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            last_name = user_info.get('last_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            photo_url = user_info.get('photo_200', '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            city = user_info.get('city', {}).get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            country = user_info.get('country', {}).get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            bdate = user_info.get('bdate', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            status = user_info.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            occupation = user_info.get('occupation', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            followers_count = user_info.get('followers_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            sex = user_info.get('sex', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            relation = user_info.get('relation', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

            sex_map = {1: '–ñ–µ–Ω—Å–∫–∏–π', 2: '–ú—É–∂—Å–∫–æ–π', 0: '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
            relation_map = {
                1: '–ù–µ –∂–µ–Ω–∞—Ç/–ù–µ –∑–∞–º—É–∂–µ–º',
                2: '–ï—Å—Ç—å –¥—Ä—É–≥/–ï—Å—Ç—å –ø–æ–¥—Ä—É–≥–∞',
                3: '–ü–æ–º–æ–ª–≤–ª–µ–Ω/–ü–æ–º–æ–ª–≤–ª–µ–Ω–∞',
                4: '–ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º',
                5: '–í—Å—ë —Å–ª–æ–∂–Ω–æ',
                6: '–í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ',
                7: '–í–ª—é–±–ª—ë–Ω/–í–ª—é–±–ª–µ–Ω–∞',
                8: '–í –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ',
                0: '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            }
            sex = sex_map.get(sex, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            relation = relation_map.get(relation, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

            reply = (
                f"üîµ –í–∫: {vk_id}\n"
                f"üë§ –ò–º—è: {first_name}\n"
                f"üë§ –§–∞–º–∏–ª–∏—è: {last_name}\n"
                f"üåç –ì–æ—Ä–æ–¥: {city}\n"
                f"üåç –°—Ç—Ä–∞–Ω–∞: {country}\n"
                f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {bdate}\n"
                f"üí¨ –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üíº –†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {occupation}\n"
                f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {followers_count}\n"
                f"üöª –ü–æ–ª: {sex}\n"
                f"üíç –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {relation}\n"
                f"üì∏ –§–æ—Ç–æ: {photo_url}"
            )
        elif 'error' in response:
            reply = response['error'].get('error_msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ VK API.')
        else:
            reply = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        show_progress_bar(message.chat.id)
        bot.send_message(message.chat.id, reply)
    except IndexError:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /vk <user_id>")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

#–ø–æ–∏—Å–∫ –ø–æ —Ç–≥
@bot.message_handler(commands=['tg'])
def tg_command(message):
    user_id = message.from_user.id
    if is_user_blocked(message.from_user.id):
        cursor.execute("SELECT block_time FROM users WHERE user_id = ?", (message.from_user.id,))
        block_time = cursor.fetchone()[0]
        if block_time == 0:
            bot.send_message(message.chat.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        else:
            unblock_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(block_time))
            bot.send_message(message.chat.id, f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {unblock_date} –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    if not check_subscription(user_id):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    try:
        show_progress_bar(message.chat.id)
        identifier = message.text.split()[1]
        user_info = run_async(get_user_info(identifier))
        if user_info:
            if identifier.isdigit():
                username = user_info.username
                if username:
                    bot.reply_to(message, f"Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {identifier}: @{username}")
                else:
                    boti = f"tg://user?id={identifier}"
                    bot.reply_to(message, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {identifier} –Ω–µ—Ç username.\nüîì –ê–∫–∫–∞—É–Ω—Ç [–¢–´–ö]({boti})\n", parse_mode="Markdown")
            else:
                user_id = user_info.id
                bot.reply_to(message, f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {identifier}: {user_id}")
        else:
            boti = f"tg://user?id={identifier}"
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\nüîì –ê–∫–∫–∞—É–Ω—Ç [–¢–´–ö]({boti})\n", parse_mode="Markdown")
    except IndexError:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /tg <ID –∏–ª–∏ @username>")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

#–ø–æ–∏—Å–∫ ip
@bot.message_handler(commands=['ip'])
def handle_osint_ip(message):
    user_id = message.from_user.id
    if is_user_blocked(message.from_user.id):
        cursor.execute("SELECT block_time FROM users WHERE user_id = ?", (message.from_user.id,))
        block_time = cursor.fetchone()[0]
        if block_time == 0:
            bot.send_message(message.chat.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        else:
            unblock_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(block_time))
            bot.send_message(message.chat.id, f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {unblock_date} –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    if not check_subscription(user_id):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return

    command_text = message.text
    ip_match = re.search(r'/ip\s+([\d\.]+)', command_text)
    
    if ip_match:
        ip_address = ip_match.group(1)
        ip_info = get_ip_info1(ip_address)
        
        if ip_info:
            response_text = (
                f"üè≥IP: {ip_info['ip']}\n"
                f"üîê–°—Ç—Ä–∞–Ω–∞: {ip_info.get('country', 'N/A')}\n"
                f"üåé–†–µ–≥–∏–æ–Ω: {ip_info.get('region', 'N/A')}\n"
                f"üåè–ì–æ—Ä–æ–¥: {ip_info.get('city', 'N/A')}\n"
                f"üåç–®–∏—Ä–æ—Ç–∞ –∏ –¥–æ–ª–≥–æ—Ç–∞: {ip_info.get('loc', 'N/A')}\n"
                f"üñ•–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {ip_info.get('org', 'N/A')}"
            )
        else:
            response_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç—Ç–æ–º—É IP-–∞–¥—Ä–µ—Å—É."
    else:
        response_text = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π: /ip IP-–∞–¥—Ä–µ—Å"
    show_progress_bar(message.chat.id)
    bot.reply_to(message, response_text)

@bot.message_handler(commands=['num'])
def handle_osint_num(message):
    user_id = message.from_user.id
    if is_user_blocked(message.from_user.id):
        cursor.execute("SELECT block_time FROM users WHERE user_id = ?", (message.from_user.id,))
        block_time = cursor.fetchone()[0]
        if block_time == 0:
            bot.send_message(message.chat.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        else:
            unblock_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(block_time))
            bot.send_message(message.chat.id, f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {unblock_date} –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    if not check_subscription(user_id):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    try:
        args = message.text.split()
        if len(args) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /num.")
            return

        phone_number = args[1]
        is_rf = 'rf' in args

        show_progress_bar(message.chat.id)

        info = get_phone_info(phone_number, is_rf)
        bot.reply_to(message, info)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(commands=['banner'])
def send_banner(message):
    user_id = message.from_user.id
    if is_user_blocked(message.from_user.id):
        cursor.execute("SELECT block_time FROM users WHERE user_id = ?", (message.from_user.id,))
        block_time = cursor.fetchone()[0]
        if block_time == 0:
            bot.send_message(message.chat.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        else:
            unblock_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(block_time))
            bot.send_message(message.chat.id, f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {unblock_date} –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    if not check_subscription(user_id):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    try:
        command_parts = message.text.split(maxsplit=2)
        if len(command_parts) < 3:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /banner {–Ω–æ–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞} {—Ç–µ–∫—Å—Ç}")
            return
        
        font_number = int(command_parts[1])
        banner_text = command_parts[2]

        fonts = pyfiglet.FigletFont.getFonts()

        boti = "https://github.com/GemorProject/fonts-/blob/main/fonts.txt"

        if font_number < 0 or font_number >= len(fonts):
            bot.reply_to(message, f"–®—Ä–∏—Ñ—Ç —Å –Ω–æ–º–µ—Ä–æ–º {font_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–î–æ—Å—Ç—É–ø–Ω–æ —à—Ä–∏—Ñ—Ç–æ–≤: {len(fonts)}\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —à—Ä–∏—Ñ—Ç—ã: [–¢–´–ö]({boti})", parse_mode="Markdown")
            return

        show_progress_bar1(message.chat.id)
        selected_font = fonts[font_number]

        banner = pyfiglet.figlet_format(banner_text, font=selected_font)
        bot.reply_to(message, f"<pre>{banner}</pre>", parse_mode="HTML")

    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    while True:
        try:
            threading.Thread(target=check_blocks, daemon=True).start()
            logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            bot.polling(none_stop=True)
        except telebot.apihelper.ApiException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram API: {e}")
            logging.info("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            break